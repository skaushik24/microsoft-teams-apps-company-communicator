name: Build and deploy TechUnicorn App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v3

      - name: üõ†Ô∏è Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: üß± Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: ‚öõÔ∏è Build React frontend
        working-directory: Source/CompanyCommunicator/ClientApp
        run: |
          npm install
          npm run build

      - name: üìÅ Clean + copy React build to wwwroot (for .NET publish)
        # This step prepares the wwwroot for dotnet publish to pick up.
        # Even if dotnet publish doesn't include it, the next step will ensure it's there.
        run: |
          $wwwrootPath = "Source/CompanyCommunicator/wwwroot"
          if (Test-Path $wwwrootPath) {
            Remove-Item -Recurse -Force $wwwrootPath
          }
          New-Item -ItemType Directory -Path $wwwrootPath
          Copy-Item -Path Source/CompanyCommunicator/ClientApp/build/* -Destination $wwwrootPath -Recurse -Force

      - name: üîç List wwwroot contents after React build (debug)
        # Verify that React files are correctly copied to the wwwroot in the runner
        run: Get-ChildItem -Path Source/CompanyCommunicator/wwwroot -Recurse

      - name: üî® Publish .NET project
        working-directory: Source/CompanyCommunicator
        run: |
          dotnet publish Microsoft.Teams.Apps.CompanyCommunicator.csproj -c Release -o ./output

      - name: üìÅ Ensure React build is in publish output
        # This crucial step explicitly copies the React build into the final publish output's wwwroot.
        # This guarantees that the frontend files are part of the package deployed to Azure.
        run: |
          $sourceWwwroot = "Source/CompanyCommunicator/wwwroot"
          $destinationWwwroot = "Source/CompanyCommunicator/output/wwwroot"
          
          # Create the destination wwwroot directory if it doesn't exist within the output
          if (-not (Test-Path $destinationWwwroot)) {
            New-Item -ItemType Directory -Path $destinationWwwroot
          } else {
            # Clear existing contents to ensure a clean copy
            Remove-Item -Recurse -Force $destinationWwwroot\*
          }
          
          # Copy all contents from the source wwwroot (with React build) to the destination
          Copy-Item -Path $sourceWwwroot\* -Destination $destinationWwwroot -Recurse -Force

      - name: üîç List output contents (debug)
        # Verify the final structure of the 'output' directory before zipping,
        # ensuring 'wwwroot' with React files is present.
        run: Get-ChildItem -Path Source/CompanyCommunicator/output -Recurse

      - name: üì¶ Zip publish output
        working-directory: Source/CompanyCommunicator/output
        run: Compress-Archive -Path * -DestinationPath ../../publish.zip

      - name: üöÄ Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: TechUnicorn-Communicator
          package: Source/publish.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
